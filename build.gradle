def src = "src"
def main_src = src + "/main/java"

def build = "build"
def main_build = build + "/classes/main"

apply plugin: 'java'
apply plugin: 'eclipse'

if(JavaVersion.current() != JavaVersion.VERSION_1_8){
    throw new GradleException("This build must be run with java 8")
}

repositories {
  mavenCentral()
}

dependencies {
  testCompile 'junit:junit:4.12'
  compile 'com.google.code.gson:gson:2.5'
  runtime 'com.google.code.gson:gson:2.5'
}

compileJava {
    options.compilerArgs << "-Xlint:all"
}

compileTestJava {
    options.compilerArgs << "-Xlint:all"
}

test {
  enableAssertions = true

  testLogging {
    exceptionFormat = 'full'
  }

  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }
}

task copyFXMLandCSS (type: Copy) {
    from main_src
    into main_build
    include('**/*.fxml', '**/*.css')
}

task copyConfig (type: Copy) {
    from main_src
    into main_build
    include('**/*.json')
}

assemble.dependsOn copyFXMLandCSS
assemble.dependsOn copyConfig

task runGui(type: JavaExec) {
      classpath = sourceSets.main.runtimeClasspath
      workingDir = main_build
      main = 'uk.ac.cam.echo2016.multinarrative.gui.FXMLGUI'
}

task runTextPreview(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	workingDir = main_build
    main = 'uk.ac.cam.echo2016.multinarrative.preview.TextPreview'

    if(project.hasProperty('directory')) {
        args directory
    } else {
        println 'Usage: ./gradlew -Pdirectory=<directory> runTextPreview'
    }
}

task runHTMLPreview(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	workingDir = main_build
    main = 'uk.ac.cam.echo2016.multinarrative.preview.HTMLPreview'

    if(project.hasProperty('directory')) {
        args directory
    } else {
        println 'Usage: ./gradlew -Pdirectory=<directory> runHTMLPreview'
    }
}

runGui.dependsOn assemble
runTextPreview.dependsOn assemble
runHTMLPreview.dependsOn assemble

